Описание bitrix24-api

Стояла задача автоматизировать списание остатков товара в Б24
У товаров имелись 3 доп. свойства созданных типа целое число, остатки на складах (Краснопресненская, Балаклавский, Красноярск)
У сделки было одно доп. свойство типа список с выбором конкретного склада (Краснопресненская, Балаклавский, Красноярск)
В момент, когда сделка переходила в определенный статус, необходимо было обновить остатки у привязанных к ней товаров, с учетом выбранного склада.
Т.е. если у сделки А выбран склад "Красноярск" и имеется товар А1, то в доп. поле товара А1 "Склад Красноярск" число должно уменьшится на N единиц.
В случае если статус откатывают назад после списания, то остатки возвращаются (ввел спец доп. галочку для отслеживания была ли отгрузка по сделке)

Как решение, написал небольшой модуль для работы с REST-API через веб-хуки.
Настроил события, чтоб при изменении сделки приходил запрос на index.php вида
$_POST = [
	'event' => 'ONCRMDEALUPDATE',
	'data' => [
		'FIELDS' => ['ID' => 156]
	],
	'auth' => [
		'domain' => '#CENSORED#',
		'application_token' => '1yptx99zpcyjsxly5qylru999bf095sk',
	]
];

По названию события, пытаемся найти одноименный класс в папке Handlers и вызвать его метод execute()
Таким образом для обработки нового события достаточно создать новый класс (код открыт к расширению и закрыт к изменению)

В папке Api описал нужные мне сущности.
Есть класс Client.php через который осуществляются все запросы к Б24
И 2 базовых класса Entity.php и EntityCollection.php (для работы с 2мя типами сущностей Б24)
Все остальные классы наследуются от 2х базовых.
Вся логика основных запросов REST остается в базовых классах, а при наследовании только переопределяем статическое свойство
protected static $entity = '/crm.deal';
Т.е. нужна новая сущность - создали класс, прописали ее url и далее все унаследованные методы будут работать!

В данном случае, для работы с 1 конкретной позицией конкретной сделки не было сущности в B24 REST
Поэтому пришлось описывать доп. сущность для работы с коллекциями с 2мя базовыми методами get и set для всего набора данных

По моей задумке, папка Api должна заполняться постепенно разными классами и быть одинаковой на всех проектах.
А сама логика, которая меняется хранится в отдельном namespace Handlers и она везде разная + также хранит в константах IDшники полей и статусов.
Вообщем вот такая попытка реализовать свой модуль для будущих работ.
